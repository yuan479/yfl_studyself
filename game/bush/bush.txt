游戏概述
本设计是一款PC端的物理益智解谜游戏，玩家通过鼠标操作引导水流帮助小鳄鱼洗澡。游戏核心玩法基于流体物理模拟和策略性路径规划，去除了商业化元素和隐藏内容，专注于核心解谜体验。

核心设计要素
1. 游戏目标系统
主要目标：引导清水流入小鳄鱼浴缸

水量要求：每关需达到指定水量（如80%）

收集品：每关3只小黄鸭（可选目标）

2. 控制方案（鼠标操作）
操作	效果	视觉反馈
左键拖动	挖掘土壤路径	实时显示挖掘轨迹
右键点击	放置/激活特殊道具	道具高亮闪烁
滚轮缩放	调整游戏视角	平滑镜头缩放
空格键	重置水流	水流消失动画
3. 游戏物理系统
流体类型与特性
流体	颜色	物理特性	交互反应
清水	蓝色	受重力影响向下流动	遇熔岩→蒸发
毒水	紫色	密度较高，流动较慢	遇泥浆→爆炸
泥浆	绿色	黏性液体，流速慢	遇毒水→爆炸
蒸汽	白色	向上飘动	遇冰墙→凝结
环境元素
元素	特性	交互
普通土壤	可挖掘	无特殊交互
岩石	不可挖掘	阻挡所有流体
熔岩	不可挖掘	使水蒸发
冰墙	可挖掘	使蒸汽凝结
水藻	可挖掘	吸收清水
4. 关卡机关系统
机关类型	功能	激活方式
风扇	改变流体方向	蒸汽接触启动
开关门	开启/关闭通道	流体持续接触
传送门	传送流体	流体进入入口
炸弹	炸毁岩石	毒水+泥浆组合触发
5. 关卡设计结构
基础关卡（1-30关）

单水源，单目标

基础流体交互教学

逐步引入新元素

进阶关卡（31-60关）

多水源系统

流体转化链（水→蒸汽→水）

连锁机关触发

挑战关卡（61-90关）

限时水流（水源会关闭）

移动障碍物

多重目标路径

游戏界面设计
text
┌───────────────────────────────────┐
│ 关卡: 12  水量: ████▁▁▁ 65%      │ ← 状态栏
│ 鸭子: 🟡🟡⚫ 重置(R) 菜单(ESC)     │
├───────────────────────────────────┤
│  +-------------------------------+  │
│  |  ██               ▒▒▒        |  │
│  |█  ██   💧        ▒🔥▒        |  │
│  |█      ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒        |  │
│  |█  ▒▒▒▒▒              ██      |  │
│  |█  ▒  ▒ ▒▒▒▒▒▒▒▒▒▒▒▒  ██      |  │
│  |█  ▒  ▒ ▒          ▒  ██      |  │
│  |█  ▒  ▒ ▒    🐊    ▒  ██      |  │
│  |█  ▒▒▒▒▒ ▒▒▒▒▒▒▒▒▒▒▒  ██      |  │
│  +-------------------------------+  │
└───────────────────────────────────┘
界面说明：

状态栏：显示关卡、水量进度、鸭子收集

游戏区域：

██ 岩石（不可挖掘）

▒ 土壤（可挖掘）

💧 水源

🔥 熔岩

🐊 小鳄鱼浴缸

🟡 已收集鸭子

⚫ 未收集鸭子

物理系统实现方案
流体模拟算法
javascript
class FluidParticle {
  constructor(x, y, type) {
    this.x = x;
    this.y = y;
    this.type = type; // 'water', 'sludge', 'poison'
    this.velocity = { x: 0, y: 0 };
  }

  update(dt, environment) {
    // 应用重力（蒸汽除外）
    if (this.type !== 'steam') {
      this.velocity.y += GRAVITY * dt;
    }
    
    // 检测碰撞和交互
    const interactions = this.checkInteractions(environment);
    
    // 更新位置
    this.x += this.velocity.x * dt;
    this.y += this.velocity.y * dt;
    
    // 处理特殊交互
    this.handleSpecialInteractions(interactions);
  }

  checkInteractions(environment) {
    // 检测与地形、其他流体的交互
    // 返回交互结果（如：接触熔岩、碰撞岩石等）
  }

  handleSpecialInteractions(results) {
    if (results.includes('lava') && this.type === 'water') {
      this.convertToSteam();
    }
    // 其他交互处理...
  }
}
挖掘系统
javascript
function handleMouseInput() {
  canvas.addEventListener('mousedown', (e) => {
    isDigging = true;
    lastPos = getMousePosition(e);
  });

  canvas.addEventListener('mousemove', (e) => {
    if (isDigging) {
      const currentPos = getMousePosition(e);
      digPath(lastPos, currentPos);
      lastPos = currentPos;
    }
  });

  canvas.addEventListener('mouseup', () => {
    isDigging = false;
  });
}

function digPath(start, end) {
  // 计算两点间的路径点
  const pathPoints = calculateDigPath(start, end);
  
  // 移除路径上的土壤
  pathPoints.forEach(point => {
    if (isDiggable(point)) {
      removeSoil(point);
      addDigEffect(point); // 挖掘特效
    }
  });
}
关卡设计模板
基础关卡示例（第5关）
text
目标：引导60%水量到浴缸
水源位置：顶部中央
浴缸位置：底部右侧
障碍：
  █████████
  █S       █   // S=水源
  █  ██    █
  █        █
  █    ██  █
  █        █
  ██      B█   // B=浴缸
  █████████
玩家策略：

从水源向下挖掘直线通道

绕过右侧岩石障碍

向左弯曲避开底部岩石

转向右侧进入浴缸

进阶关卡示例（第35关）
text
目标：利用蒸汽启动风扇
元素：
  ███████████
  █S   L    █   // S=水源, L=熔岩
  █         █
  █  ██     █
  █      F  █   // F=风扇
  █         █
  ██       B█
  ███████████
解法流程：

引导水流接触熔岩产生蒸汽

蒸汽上升触发顶部风扇

风扇吹动下方水源水流

改变水流方向进入浴缸

美术风格设计
视觉主题
色彩方案：明亮卡通风格

角色设计：简约可爱的小鳄鱼

流体效果：半透明粒子系统

环境元素：清晰区分的材质纹理

特效系统
特效	触发条件	视觉效果
水流	持续显示	动态波纹效果
挖掘	鼠标操作	土壤飞溅粒子
蒸发	水+熔岩	上升蒸汽动画
爆炸	毒水+泥浆	冲击波动画
关卡编辑器（可选）
功能设计
text
┌───元素选择区─────┐
│ [水源][浴缸][岩石] │
│ [熔岩][冰墙][水藻] │
│ [风扇][传送门][开关]│
├───编辑操作区─────┤
│ 鼠标左键：放置元素 │
│ 鼠标右键：删除元素 │
│ 滚轮：缩放视图    │
├───关卡测试区─────┤
│ [测试关卡] [保存] │
└─────────────────┘
数据格式
json
{
  "level": 42,
  "width": 15,
  "height": 12,
  "water_required": 75,
  "elements": [
    {"type": "source", "x": 3, "y": 1},
    {"type": "bathtub", "x": 12, "y": 10},
    {"type": "lava", "x": 7, "y": 3},
    // 其他元素...
  ]
}
游戏进度系统
关卡解锁
线性关卡结构

完成前一关解锁下一关

无星评级系统（仅完成目标）

玩家数据
当前关卡进度

各关卡最佳水量百分比

鸭子收集总数（可选）

技术实现方案
架构选择
组件	技术选型	说明
渲染	Pixi.js	2D WebGL渲染
物理	自定义引擎	简化流体物理
输入	原生事件	鼠标交互
存储	localStorage	保存进度
性能优化
粒子池系统：复用流体粒子对象

空间分区：四叉树碰撞检测

细节分级：远距离简化渲染

后台计算：Worker线程处理物理